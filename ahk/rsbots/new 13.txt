
#NoEnv ; Recommended for performance and compatibility with future AutoHotkey releases.
#Warn ; Enable warnings to assist with detecting common errors.
;SendMode Input ; Recommended for new scripts due to its superior speed and reliability.
SetWorkingDir %A_ScriptDir% ; Ensures a consistent starting directory.
#SingleInstance, Force

CoordMode, Mouse, Screen
CoordMode, Pixel, Screen

global slayerColor:= 0xF8F903

global minMouseSpeed:= 3
global maxMouseSpeed:= 10

global minRandWait := 10000
global maxRandWait := 15000
global loopTimer := 50

global loopAmt := 20000
global ShouldRun:= true

global LeftSearchArea := 0
global TopSearchArea := 0


global RightSearchArea := 1440
global BottomSearchArea := A_ScreenHeight

Loop
{
	
    
	    Loop, %loopAmt%
		{
			if(ShouldRun)
			{
			;Bank
			if(ClickOnPixelOffset(slayerColor, 0,15))
			{
				randSleep()
			}
			
		}
	}
	Sleep, 1000

}


!Numpad1::updateColor1()
updateColor1()
{
     MouseGetPos, outx, outy
     PixelGetColor, slayerColor, %outx%, %outy%
	 
	 MsgBox, The cursor is at X%outx% Y%outy%. The color is %slayerColor%
}



!Numpad0::ToggleShouldRun()
ToggleShouldRun(){
    ShouldRun := !ShouldRun
    MsgBox, %ShouldRun%
}

!c::ClickOnPixel(lookforcolor1)
ClickOnPixel(color)
{
    PixelSearch, x, y, LeftSearchArea, TopSearchArea, RightSearchArea, BottomSearchArea, color, 1, fast
    if ErrorLevel
    {
        return false
    }
    else
    {
        MouseClick, L,  x,y,, % mouseSpeed()        
        return true
    }
	
}

ClickOnPixelOffset(color, offsetx, offsety)
{
    PixelSearch, x, y, LeftSearchArea, TopSearchArea, RightSearchArea, BottomSearchArea, color, 1, fast
    if ErrorLevel
    {
        return false
    }
    else
    {
        MouseClick, L, % x + offsetx , % y + offsety ,, % mouseSpeed()        
        return true
    }
	
}

!l::LookForPixel(lookforcolor1)
LookForPixel(color)
{
    PixelSearch, x, y, LeftSearchArea, TopSearchArea, RightSearchArea, BottomSearchArea, color, 1, fast
    if ErrorLevel
    {
        return false
    }
    else
    {
        MouseMove, x,y, % mouseSpeed()
        
        return true
    }
}

randSleep()
{
	Sleep, % rand(minRandWait,maxRandWait)
}

mouseSpeed()
{
   
   return rand(2,4)
}

rand(min, max)
{
   random, ran, %min%, %max%
   return ran
}
